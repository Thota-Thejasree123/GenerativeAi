!pip install PyMuPDF
!pip install python-pptx
!pip install scikit-learn
!pip install openai==0.28


import os
import re
import fitz  # PyMuPDF
from pptx import Presentation  # python-pptx
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import openai
from google.colab import files
from PIL import Image  # Python Imaging Library

# Install Tesseract OCR and pytesseract
!apt-get install -y tesseract-ocr
!pip install pytesseract

import pytesseract  # Python-tesseract

# Initialize OpenAI API key
openai.api_key = 'OPENAI_API_KEY'

# Function to clean extracted text
def clean_text(text):
    text = re.sub(r'\s+', ' ', text)  # Replace multiple spaces/newlines with a single space
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)  # Remove non-alphanumeric characters
    return text

# Function to process different document types and extract text
def process_document(filename):
    _, file_extension = os.path.splitext(filename)
    if file_extension.lower() == ".pdf":
        return process_pdf(filename)
    elif file_extension.lower() == ".pptx":
        return process_pptx(filename)
    elif file_extension.lower() in [".jpg", ".jpeg", ".png", ".gif"]:
        return process_image(filename)
    else:
        raise ValueError(f"Unsupported file type: {file_extension}")

# Function to extract text from PDF
def process_pdf(filename):
    try:
        # Extract text from PDF using PyMuPDF
        doc = fitz.open(filename)
        text = ""
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text += page.get_text()
        doc.close()
        return clean_text(text)
    except Exception as e:
        print(f"Error processing PDF {filename}: {e}")
        return ""

# Function to extract text from PPTX
def process_pptx(filename):
    try:
        prs = Presentation(filename)
        text = ""
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    text += shape.text + "\n"
        return clean_text(text)
    except Exception as e:
        print(f"Error processing PPTX {filename}: {e}")
        return ""

# Function to extract text from images using OCR
def process_image(filename):
    try:
        image = Image.open(filename)
        text = pytesseract.image_to_string(image)
        return clean_text(text)
    except Exception as e:
        print(f"Error processing image {filename}: {e}")
        return ""

# Function to create vector representations of documents
def create_document_vectors(documents):
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform(documents)
    return vectors, vectorizer

# Function to find most relevant document based on question
def find_most_relevant_document(question, documents, vectorizer):
    question_vector = vectorizer.transform([question])
    similarities = cosine_similarity(question_vector, documents)
    most_similar_index = similarities.argmax()
    return most_similar_index

# Function to get response from OpenAI based on document content
def get_openai_response(document_text, question):
    prompt = f"""
    You are an AI assistant for answering questions related to a medical document.
    Your response should be based only on the content of the provided document. Do not use any external knowledge or provide any medical advice, especially regarding medications. Reply politely as "I have no information related to the question in this document" if you do not know the answer.
    
    Document Content: {document_text}
    
    Question: {question}
    
    Answer in Markdown:
    """
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": question}
        ],
        max_tokens=150
    )
    return response.choices[0].message["content"].strip()

# Main function to handle user input and answer questions
def main():
    document_texts = []
    print("Welcome to the Medical Document Q&A Bot!")

    while True:
        if not document_texts:
            print("\nNo document loaded. Please upload a document.")
            uploaded = files.upload()
            if not uploaded:
                print("No file uploaded. Exiting.")
                break
            document_path = list(uploaded.keys())[0]
            try:
                document_text = process_document(document_path)
                if document_text:
                    document_texts.append(document_text)
                    print("Document processed and added.")
                else:
                    print("Failed to process document.")
                    continue
            except ValueError as e:
                print(e)
                continue

        question = input("\nEnter your question related to the uploaded document: ").strip()
        if "medication" in question.lower():
            print("I cannot provide medical advice or information about medications.")
        else:
            vectors, vectorizer = create_document_vectors(document_texts)
            most_relevant_doc_index = find_most_relevant_document(question, vectors, vectorizer)
            answer = get_openai_response(document_texts[most_relevant_doc_index], question)
            print(answer)

        user_choice = input("\nDo you want to ask another question about the same document or upload a new document? (Type 'ask' to continue with the same document or 'upload' to upload a new document): ").strip().lower()
        if user_choice == 'upload':
            document_texts = []

if __name__ == "__main__":
    main()
